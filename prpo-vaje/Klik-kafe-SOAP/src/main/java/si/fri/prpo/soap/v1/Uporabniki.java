package si.fri.prpo.soap.v1;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;

import si.fri.prpo.soap.UporabnikiPort;

import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.6
 * 2017-01-04T15:25:42.734+01:00
 * Generated source version: 3.1.6
 * 
 */
@WebServiceClient(name = "Uporabniki", 
                  wsdlLocation = "file:/C:/git/prpo-vaje/Klik-kafe-sheme/lib/si/fri/prpo/storitve/uporabniki/v1/Uporabniki.wsdl",
                  targetNamespace = "http://prpo.fri.si/storitve/uporabniki/v1") 
public class Uporabniki extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://prpo.fri.si/storitve/uporabniki/v1", "Uporabniki");
    public final static QName UporabnikiSOAP = new QName("http://prpo.fri.si/storitve/uporabniki/v1", "UporabnikiSOAP");
    static {
        URL url = null;
        try {
            url = new URL("file:/C:/git/prpo-vaje/Klik-kafe-sheme/lib/si/fri/prpo/storitve/uporabniki/v1/Uporabniki.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(Uporabniki.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:/C:/git/prpo-vaje/Klik-kafe-sheme/lib/si/fri/prpo/storitve/uporabniki/v1/Uporabniki.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public Uporabniki(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public Uporabniki(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Uporabniki() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public Uporabniki(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public Uporabniki(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public Uporabniki(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns UporabnikiPort
     */
    @WebEndpoint(name = "UporabnikiSOAP")
    public UporabnikiPort getUporabnikiSOAP() {
        return super.getPort(UporabnikiSOAP, UporabnikiPort.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns UporabnikiPort
     */
    @WebEndpoint(name = "UporabnikiSOAP")
    public UporabnikiPort getUporabnikiSOAP(WebServiceFeature... features) {
        return super.getPort(UporabnikiSOAP, UporabnikiPort.class, features);
    }

}
